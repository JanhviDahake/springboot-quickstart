name: Advanced CI Pipeline

on:
  push:
    branches: 
      - develop
      - 'feature-*'
      - 'release-*'
  pull_request:
    branches: 
      - develop
      - 'feature-*'
      - 'release-*'
  schedule:
    # 5 PM IST is 11:30 AM UTC (IST is UTC+5:30)
    - cron: '30 11 * * 3,5'

env:
  ARTIFACT_VERSION: ${{ github.ref_name }}-${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up Java
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # 4. Build the project (skip tests here)
    - name: Build with Maven
      run: mvn clean package -DskipTests

    # 5. Run unit tests (continue even if they fail)
    - name: Run unit tests
      run: mvn test
      continue-on-error: true

    # 6. Publish test report
    - name: Publish test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    # 7. Generate code coverage report
    - name: Generate code coverage report
      run: mvn jacoco:report
      continue-on-error: true

    # 8. Upload code coverage report
    - name: Upload code coverage report
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-${{ env.ARTIFACT_VERSION }}
        path: target/site/jacoco/

    # 9. SonarCloud static code analysis
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      with:
        projectBaseDir: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ github.repository }}
        SONAR_ORGANIZATION: your-sonarcloud-org # <-- Replace with your SonarCloud org key

    # 10. Upload build artifacts (JAR)
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact-${{ env.ARTIFACT_VERSION }}
        path: target/*.jar

    # 11. Upload JAR to JFrog Artifactory
    - name: Upload JAR to Artifactory
      env:
        ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
        ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
        ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      run: |
        JAR_FILE=$(ls target/*.jar | head -n 1)
        curl -u "$ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD" -T "$JAR_FILE" "$ARTIFACTORY_URL/$(basename $JAR_FILE)"

    # 12. Notify on critical failure (Slack example)
    - name: Notify on critical failure
      if: failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ Build failed for ${{ github.repository }} on branch ${{ github.ref_name }}. Please check the Actions logs."}' $SLACK_WEBHOOK